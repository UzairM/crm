// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MANAGER
  AGENT
  CLIENT
  NONE
}

enum TicketStatus {
  NEW
  OPEN
  CLOSED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

model User {
  id            Int      @id @default(autoincrement())
  oryIdentityId String   @unique
  email         String   @unique
  name          String?
  role          Role     @default(NONE)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  assignedTickets   Ticket[]        @relation("AssignedTickets")
  clientTickets     Ticket[]        @relation("ClientTickets")
  messages          TicketMessage[]
  knowledgeArticles KnowledgeArticle[]
}

// Test model to verify database connection
model TestConnection {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
}

model Ticket {
  id               Int          @id @default(autoincrement())
  subject          String
  status          TicketStatus @default(NEW)
  assignedAgentId Int?
  clientId        Int
  isRead          Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  assignedAgent   User?        @relation("AssignedTickets", fields: [assignedAgentId], references: [id])
  client         User         @relation("ClientTickets", fields: [clientId], references: [id])
  messages       TicketMessage[]

  @@index([assignedAgentId])
  @@index([clientId])
  @@index([status])
  @@index([isRead])
}

model TicketMessage {
  id             Int      @id @default(autoincrement())
  ticketId       Int
  senderId       Int
  text           String   @db.Text
  isInternalNote Boolean  @default(false)
  createdAt      DateTime @default(now())

  // Relations
  ticket         Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender         User     @relation(fields: [senderId], references: [id])

  @@index([ticketId])
  @@index([senderId])
  @@index([isInternalNote])
}

model KnowledgeArticle {
  id        Int           @id @default(autoincrement())
  title     String
  content   String        @db.Text
  status    ArticleStatus @default(DRAFT)
  authorId  Int
  author    User         @relation(fields: [authorId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([authorId])
  @@index([status])
}
